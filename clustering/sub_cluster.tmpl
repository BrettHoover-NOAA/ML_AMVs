#! /bin/bash
# datetime settings
YYYY=>>YYYY<<
MM=>>MM<<
DD=>>DD<<
HH=>>HH<<
# clustering settings
threshDist=>>THRESHDIST<<
threshPres=>>THRESHPRES<<
threshTime=>>THRESHTIME<<
threshUwnd=>>THRESHUWND<<
threshVwnd=>>THRESHVWND<<
# tile settings
nPreBins=>>NPREBINS<<
minTilePre=>>MINTILEPRE<<
maxTilePre=>>MAXTILEPRE<<
haloPre=>>HALOPRE<<
nTimBins=>>NTIMBINS<<
minTileTim=>>MINTILETIM<<
maxTileTim=>>MAXTILETIM<<
haloTim=>>HALOTIM<<
optBins=>>OPTBINS<<
memPerTile=>>MEMPERTILE<<

runDir=`pwd`
anaDateTime=${YYYY}${MM}${DD}${HH}
logFile=${1}

# 0) retrieve BUFR file
echo "retrieving BUFR file on head node" >> "${logFile}" 2>&1
./retrieve_BUFR_file.sh ${runDir} ${YYYY} ${MM} ${DD} ${HH} >> "${logFile}" 2>&1
# 1) process BUFR file to netCDF:
#   1a. extract ob and metadata information from selected tanks
#   1b. assign ob-type and pre-QC check flag
#   1c. compute ob-time as fractional hours relative to analysis-time
#   1d. compute u- and v-components of wind from speed and direction
#   1e. write to netCDF file
jName_process_BUFR=process_bufr.${anaDateTime}
jid_process_BUFR=$(sbatch --parsable -A da-cpu -N 1 -t 0:30:00 --job-name=${jName_process_BUFR} exec_process_BUFR.sh ${runDir} ${anaDateTime} ${HH})
echo "processing BUFR file on jid ${jid_process_BUFR}" >> "${logFile}" 2>&1
# 2) define tiles
jName_generate_tiles=generate_tiles.${anaDateTime}
jid_generate_tiles=$(sbatch --parsable -A da-cpu -N 1 -t 0:10:00 --dependency=afterany:${jid_process_BUFR} --job-name=${jName_generate_tiles} run_create_tile_yaml.sh ${runDir} ${anaDateTime} ${HH} ${nPreBins} ${minTilePre} ${maxTilePre} ${haloPre} ${nTimBins} ${minTileTim} ${maxTileTim} ${haloTim} ${optBins})
echo "defining tiles on jid ${jid_generate_tiles}" >> "${logFile}" 2>&1
# 3) cluster on tiles
echo "clustering on tiles ..." >> "${logFile}" 2>&1
#   3a. loop through all Tile_xxx tile-names
nTiles=$((${nPreBins} * ${nTimBins}))
n=0
while [ ${n} -lt ${nTiles} ]
do
    n=$((${n} + 1))
    if [ ${n} -lt 10 ]; then
        tileName=Tile_00${n}
    elif [ ${n} -lt 100 ]; then
        tileName=Tile_0${n}
    else
        tileName=Tile_${n}
    fi
#   3b. compute cluster-ID (cid) and tile-ID (tid) for each observation in tile+halo
#   3c. write tile+halo to netCDF file
#   NOTE: memory allocated to single CPU is default 2300M (2.3g), but memPerTile will override   
    jName_cluster_tiles=cluster_tiles.${anaDateTime}
    jid_cluster_tiles=$(sbatch --parsable -A da-cpu -N 1 --ntasks=1 --cpus-per-task=1 --mem-per-cpu=${memPerTile} -t 0:30:00 --dependency=afterany:${jid_generate_tiles} --job-name=${jName_cluster_tiles} run_cluster.sh ${runDir} ${anaDateTime} ${HH} ${tileName} ${threshDist} ${threshPres} ${threshTime} ${threshUwnd} ${threshVwnd})
    echo "    clustering ${tileName} on jid ${jid_cluster_tiles}" >> "${logFile}" 2>&1
done
# 4) reconcile tiles
echo "reconciling tiles" >> "${logFile}" 2>&1
#   4a. collect all tile+halo data from individual tile netCDF files
#   4b. reconcile any duplicate observations to assign a single cid and tid value
#   4c. give each cluster from each tile a unique cid
#   4d. output to netCDF
jName_combine_clusters=${jName_cluster_tiles}  # this is identical to job-name for clustering tiles for use of singleton dependency
jid_combine_clusters=$(sbatch --parsable -A da-cpu -N 1 -t 0:10:00 --dependency=singleton --job-name=${jName_combine_clusters} run_combine_clusters.sh ${runDir} ${anaDateTime} ${HH} ${nTiles})
echo "reconciling tiles on jid ${jid_combine_clusters}" >> "${logFile}" 2>&1

